/* eslint-disable no-plusplus */
/* eslint-disable class-methods-use-this */
/* eslint-disable no-param-reassign */
import { LitElement, html } from 'lit-element';
import '@advanced-rest-client/clipboard-copy/clipboard-copy.js';
import '@advanced-rest-client/json-table/json-table.js';
import '@anypoint-web-components/anypoint-button/anypoint-button.js';
import '@advanced-rest-client/prism-highlight/prism-highlight.js';
import elementStyles from './styles/Render.js';

/** @typedef {import('lit-element').TemplateResult} TemplateResult */
/** @typedef {import('@advanced-rest-client/arc-types').FormTypes.Example} Example */
/** @typedef {import('@advanced-rest-client/clipboard-copy').ClipboardCopyElement} ClipboardCopyElement */

/**
 * `api-example-render`
 *
 * Renders a JSON values using Prism highlighter or JSON table.
 *
 * ## Data model
 *
 * The model is generated by `api-example-generator`. Use it to generate
 * view model for examples for AMF shape.
 *
 * ### ExampleModel
 *
 * - **hasRaw** `Boolean` - if true then `raw` property has a value
 * - **hasTitle** `Boolean` - if true then `title` property has a value
 * - **hasUnion** `Boolean` - if true then `values` property has a value
 * - **value** `String`, Optional - Example to render
 * - **title** - `String`, Optional - Example name, only when `hasTitle` is set
 * - **raw** `String`, Optional - Raw value of RAML example. This value is a
 * YAML or JSON schema value. This is only set when raw value is available in
 * the model and it is not JSON/XML.
 * - **values** `Array<ExampleModel>`, Optional - Only when `hasUnion` is set.
 *
 * ## Example
 *
 * ```javascript
 * <api-example-render example="{...}" is-json mime-type="application/json"></api-example-render>
 * ```
 */
export class ApiExampleRender extends LitElement {
  get styles() {
    return elementStyles;
  }

  static get properties() {
    return {
      /**
       * Data to render.
       */
      example: { type: Object },
      /**
       * Examples media type
       */
      mediaType: { type: String },
      /**
       * When true the example is a JSON type example.
       */
      isJson: { type: Boolean },
      /**
       * Index of selected union.
       */
      selectedUnion: { type: Number },
      /**
       * Current state of "table" button. When tru the button is highlighted.
       * Note, this won't trigger rendering table/code view as this property is used
       * by `api-resource-example-document` to handle table state change.
       */
      table: { type: Boolean },
      /**
       * When set it renders JSON table instead of code view.
       */
      renderTable: { type: Boolean },
      /**
       * Opens example source view (source from API spec file).
       */
      sourceOpened: { type: Boolean },
      /**
       * When set the actions row (copy, switch view type) is not rendered.
       */
      noActions: { type: Boolean },
      /**
       * Enables Anypoint compatibility styling
       */
      compatibility: { type: Boolean }
    };
  }

  get table() {
    return this._table;
  }

  /**
   * @param {boolean} value
   */
  set table(value) {
    const old = this._table;
    if (old === value) {
      return;
    }
    this._table = value;
    this.requestUpdate('table', old);
    this.dispatchEvent(new CustomEvent('table-changed', {
      composed: true,
      detail: {
        value
      }
    }));
  }

  get mediaType() {
    return this._mediaType;
  }

  /**
   * @param {string} value
   */
  set mediaType(value) {
    const old = this._mediaType;
    if (old === value) {
      return;
    }
    this._mediaType = value;
    this.requestUpdate('mediaType', old);
    this._dataChanged();
  }

  get example() {
    return this._example;
  }

  /**
   * @param {Example} value
   */
  set example(value) {
    const old = this._example;
    if (old === value) {
      return;
    }
    this._example = value;
    this.requestUpdate('example', old);
    this._dataChanged();
    this.selectedUnion = 0;
  }

  get sourceOpened() {
    return this._sourceOpened;
  }

  /**
   * @param {boolean} value
   */
  set sourceOpened(value) {
    const old = this._sourceOpened;
    if (old === value) {
      return;
    }
    this._sourceOpened = value;
    this.requestUpdate('sourceOpened', old);
    this._dataChanged();
  }

  constructor() {
    super();
    this.sourceOpened = false;
    this.compatibility = false;
    this.table = false;
    this.renderTable = false;
    this.isJson = false;
    this.noActions = false;
    this.sourceOpened = false;
    /** 
     * @type {number}
     */
    this.selectedUnion = undefined;
    this.mediaType = undefined;
  }

  /**
   * Computes whether passed value is a valid JSON object, when component is
   * marked to parse JSON data.
   * @param {boolean} isJson [description]
   * @param {any} value Current example value
   * @return {boolean}
   */
  _computeIsJson(isJson, value) {
    if (!isJson) {
      return false;
    }
    if (!value) {
      return false;
    }
    try {
      const result = JSON.parse(value);
      return typeof result === 'object';
    } catch (_) {
      return false;
    }
  }

  _computeHasRaw(value, raw) {
    if (!raw) {
      return false;
    }
    return String(raw) !== String(value);
  }

  _dataChanged() {
    if (this.__changeDebouncer) {
      return;
    }
    this.__changeDebouncer = true;
    setTimeout(() => {
      this.__changeDebouncer = false;
      this._renderCode();
    });
  }

  _renderCode() {
    const { example } = this;
    this._langValue = undefined;
    this._codeValue = undefined;
    if (!example || (!example.value && example.values)) {
      return;
    }
    if (this.sourceOpened) {
      this._codeValue = String(example.raw);
      this._langValue = 'yaml';
    } else {
      const value = String(example.value);
      if (value.length > 10000) {
        // examples that are huge causes browser to choke or hang.
        // This just sanitizes the schema and renders unprocessed data.
        this._codeValue = value;
        // @ts-ignore
      } else if (value || value === false || value === 0) {
        let lang;
        const type = this.mediaType;
        if (type) {
          if (type.indexOf('json') !== -1) {
            lang = 'json';
          } else if (type.indexOf('xml') !== -1) {
            lang = 'xml';
          }
        }
        this._codeValue = value
        this._langValue = lang || this.mediaType;
      } else {
        this._codeValue = '(no value in example)';
      }
    }
    this.requestUpdate();
  }

  /**
   * Copies the current response text value to clipboard.
   *
   * @param {Event} e
   */
  _copyToClipboard(e) {
    const button = /** @type HTMLButtonElement */ (e.target);
    const copy = /** @type ClipboardCopyElement */ (this.shadowRoot.querySelector('clipboard-copy'));
    if (copy.copy()) {
      button.innerText = 'Done';
    } else {
      button.innerText = 'Error';
    }
    button.disabled = true;
    if ('part' in button) {
      // @ts-ignore
      button.part.add('content-action-button-disabled');
      // @ts-ignore
      button.part.add('code-content-action-button-disabled');
    }
    setTimeout(() => this._resetCopyButtonState(button), 1000);
  }

  /**
   * Resets button icon.
   * @param {HTMLButtonElement} button Button to reset.
   */
  _resetCopyButtonState(button) {
    button.innerText = 'Copy';
    button.disabled = false;
    if ('part' in button) {
      // @ts-ignore
      button.part.remove('content-action-button-disabled');
      // @ts-ignore
      button.part.remove('code-content-action-button-disabled');
    }
    button.focus();
  }

  /**
   * @param {number} selectedUnion
   * @param {Example} example
   * @return {Example|undefined} 
   */
  _computeUnionExamples(selectedUnion, example) {
    if (selectedUnion === undefined || selectedUnion < 0) {
      return undefined;
    }
    if (!example || !example.values) {
      return undefined;
    }
    return example.values[selectedUnion];
  }

  _toggleTable(e) {
    const { target } = e;
    const { value } = e.detail;
    this.table = value;
    if (value && this.sourceOpened) {
      this.sourceOpened = !value;
    }
    this._toggleActionButtonCssPart(target, value);
  }

  _toggleSourceOpened(e) {
    const { target } = e;
    const { value } = e.detail;
    this.sourceOpened = value;
    if (value && this.table) {
      this.table = !value;
    }
    this._toggleActionButtonCssPart(target, value);
  }

  _toggleActionButtonCssPart(target, active) {
    if (!('part' in target)) {
      return;
    }
    const parts = ['content-action-button-active', 'code-content-action-button-active'];
    for (let i = 0, len = parts.length; i < len; i++) {
      if (active) {
        target.part.add(parts[i]);
      } else {
        target.part.remove(parts[i]);
      }
    }
  }

  /**
   * Handler for union type button click.
   * Sets `selectedUnion` property.
   *
   * @param {PointerEvent} e
   */
  _selectUnion(e) {
    const node = /** @type HTMLElement */ (e.target);
    const index = Number(node.dataset.index);
    if (Number.isNaN(index)) {
      return;
    }
    if (this.selectedUnion === index) {
      node.setAttribute('activated', '');
    } else {
      this.selectedUnion = index;
    }
  }

  /**
   * @param {Example} example
   * @returns {TemplateResult|string} 
   */
  _renderUnion(example) {
    const { values } = example;
    if (!values) {
      return '';
    }
    const unions = example.values.map((item) => item.title);
    const {selectedUnion} = this;
    const unionExample = this._computeUnionExamples(selectedUnion, example);
    return html`
      <div class="union-type-selector">
        <span>Any of:</span>
        ${unions.map((item, index) => html`
          <anypoint-button
            class="union-toggle"
            ?activated="${selectedUnion === index}"
            @click="${this._selectUnion}"
            data-index="${index}"
            ?compatibility="${this.compatibility}"
            title="Select ${item} type">${item}</anypoint-button>`)}
      </div>
      ${unionExample ? html`
        <api-example-render
          .example="${unionExample}"
          .isJson="${this.isJson}"
          .mediaType="${this.mediaType}"
          .table="${this.table}"
          .renderTable="${this.renderTable}"
          .noActions="${this.noActions}"></api-example-render>` : ''}
    `;
  }

  /**
   * @param {Example} example
   * @returns {TemplateResult|string} 
   */
  _headerTemplate(example) {
    const noActions = !!(this.noActions || example.isScalar);
    if (noActions) {
      return '';
    }
    const { compatibility } = this;
    const hasRaw = this._computeHasRaw(example.value, example.raw);
    const isJson = this._computeIsJson(this.isJson, example.value);
    return html`
    <div class="example-actions">
    
        <anypoint-button
          part="content-action-button, code-content-action-button"
          class="action-button"
          data-action="copy"
          @click="${this._copyToClipboard}"
          ?compatibility="${compatibility}"
          title="Copy example to clipboard"
        >Copy</anypoint-button>
        ${isJson ? html`
        <anypoint-button
          part="content-action-button, code-content-action-button"
          class="action-button"
          data-action="table"
          toggles
          .active="${this.table}"
          @active-changed="${this._toggleTable}"
          ?compatibility="${compatibility}"
          title="Toggle between table and JSON view"
        >Table view</anypoint-button>` : ''}
        ${hasRaw ? html`
          <anypoint-button
            part="content-action-button, code-content-action-button"
            class="action-button"
            data-action="code"
            toggles
            .active="${this.sourceOpened}"
            @active-changed="${this._toggleSourceOpened}"
            ?compatibility="${compatibility}"
            title="Toggle between JSON and example source view"
          >Source view</anypoint-button>` : ''}
      
    </div>`;
  }

  /**
   * @param {Example} example
   * @returns {TemplateResult|string} 
   */
  _renderExample(example) {
    const exampleValue = /** @type any */ (example.value);
    const isJsonExampleValue = this._computeIsJson(this.isJson, exampleValue);
    const renderJsonTable = this.renderTable && isJsonExampleValue;

    return html`
    ${this._headerTemplate(example)}
    ${renderJsonTable ? html`<json-table .json="${exampleValue}"></json-table>`: ''}
    <div class="code-wrapper ${example.isScalar ? 'scalar': ''}" part="code-wrapper, example-code-wrapper" ?hidden="${renderJsonTable}">
      <prism-highlight .code="${this._codeValue}" .lang="${this._langValue}"></prism-highlight>
    </div>`;
  }

  render() {
    const {example} = this;
    if (!example) {
      return '';
    }
    const isUnion = !!(example && example.hasUnion);
    return html`<style>${this.styles}</style>
    ${isUnion ? this._renderUnion(example) : this._renderExample(example)}
    <clipboard-copy .content="${/** @type string */ (example.value)}"></clipboard-copy>
    `;
  }
}
